from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors import VoiceMessagesForbidden

API_ID = 1234567890 # your api_id
API_HASH = "" # your api_hash
BOT_TOKEN = "" # your bot token from @BotFather
ADMIN_ID = 1234567890 # your user id

app = Client("anon_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

user_targets = {}
blocked_users = set()

@app.on_message(filters.command("start"))
async def start_command(client, message):
    if message.from_user.id in blocked_users:
        await message.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    if len(message.command) > 1:
        try:
            target_id = int(message.command[1])
            user_targets[message.from_user.id] = target_id
            await message.reply(
                "‚úâ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "üìÑ –¢–µ–∫—Å—Ç\n"
                "üñº –§–æ—Ç–æ\n"
                "üé¨ –í–∏–¥–µ–æ\n"
                "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "üìπ –í–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫\n\n"
                "‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel"
            )

        except ValueError:
            await message.reply("‚ùå –û—à–∏–±–∫–∞! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
    else:
        user_id = message.from_user.id
        bot_link = f"t.me/MessAnonRobot?start={user_id}"

        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã.\n"
            f"üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {bot_link}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º—É —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ!"
        )

        await message.reply(text, disable_web_page_preview=True, parse_mode=enums.ParseMode.MARKDOWN)

@app.on_message(filters.command("cancel"))
async def cancel_command(client, message):
    if message.from_user.id in user_targets:
        del user_targets[message.from_user.id]
        await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    else:
        await message.reply("‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –≤—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.")

@app.on_callback_query()
async def handle_reply_callback(client, callback_query):
    data = callback_query.data

    if data.startswith("reply:"):
        target_id = int(data.split(":")[1])
        user_targets[callback_query.from_user.id] = target_id
        await callback_query.message.reply("‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (–æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@app.on_message(filters.command("block"))
async def block_user(client, message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    try:
        user_id = int(message.text.split()[1])
        blocked_users.add(user_id)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    except (IndexError, ValueError):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/block USER_ID`.")

@app.on_message(filters.command("unblock"))
async def unblock_user(client, message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    try:
        user_id = int(message.text.split()[1])
        if user_id in blocked_users:
            blocked_users.remove(user_id)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.reply(f"‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{user_id}` –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
    except (IndexError, ValueError):
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/unblock USER_ID`.")

@app.on_message(filters.command("blocked"))
async def list_blocked_users(client, message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    if blocked_users:
        blocked_list = "\n".join([f"üîπ `{user_id}`" for user_id in blocked_users])
        await message.reply(f"üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n\n{blocked_list}", parse_mode=enums.ParseMode.MARKDOWN)
    else:
        await message.reply("‚úÖ –í —Å–ø–∏—Å–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@app.on_message(filters.command("idea"))
async def handle_idea(client, message):
    sender = message.from_user
    sender_id = sender.id
    sender_username = f"@{sender.username}" if sender.username else "‚ùå –ù–µ—Ç username"
    sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip() or "‚ùå –ù–µ—Ç –∏–º–µ–Ω–∏"

    if len(message.command) == 1:
        await message.reply("üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –±–æ—Ç–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/idea –í–∞—à–∞ –∏–¥–µ—è`", parse_mode=enums.ParseMode.MARKDOWN)
        return

    idea_text = " ".join(message.command[1:])
    idea_message = (
        f"üí° **–ù–æ–≤–∞—è –∏–¥–µ—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!**\n\n"
        f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:**\n"
        f"üîπ ID: `{sender_id}`\n"
        f"üîπ Username: {sender_username}\n"
        f"üîπ –ò–º—è: {sender_name}\n\n"
        f"üìå **–ò–¥–µ—è:**\n"
        f"{idea_text}"
    )

    await client.send_message(ADMIN_ID, idea_message, parse_mode=enums.ParseMode.MARKDOWN)
    await message.reply("‚úÖ –í–∞—à–∞ –∏–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")

@app.on_message(filters.private & (filters.text | filters.voice | filters.video_note | filters.photo | filters.video))
async def handle_anon_message(client, message):
    try:
        sender = message.from_user
        sender_id = sender.id

        if sender_id in blocked_users:
            await message.reply("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        sender_username = f"@{sender.username}" if sender.username else "‚ùå –ù–µ—Ç username"
        sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip() or "‚ùå –ù–µ—Ç –∏–º–µ–Ω–∏"

        if sender_id in user_targets:
            target_id = user_targets.pop(sender_id)

            reply_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å üîÅ", callback_data=f"reply:{sender_id}")]
            ])

            if message.text:
                content = f"üì© –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message.text}"
                await app.send_message(target_id, content, reply_markup=reply_markup)
            elif message.voice:
                content = "üé§ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                await app.send_message(target_id, text=content)
                await app.send_voice(target_id, message.voice.file_id, reply_markup=reply_markup)
            elif message.video_note:
                content = "üé• –ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫"
                await app.send_message(target_id, text=content)
                await app.send_video_note(target_id, message.video_note.file_id, reply_markup=reply_markup)
            elif message.photo:
                content = "üñº –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                await app.send_message(target_id, text=content)
                await app.send_photo(target_id, message.photo.file_id, reply_markup=reply_markup)
            elif message.video:
                content = "üé¨ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ"
                await app.send_message(target_id, text=content)
                await app.send_video(target_id, message.video.file_id, reply_markup=reply_markup)

            await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

        else:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å '?start=ID' –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except VoiceMessagesForbidden:
        await app.send_message(target_id, "–í–∞–º –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –∏–∑ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        await app.send_message(sender_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–∑ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

app.run()
